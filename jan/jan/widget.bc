class JanWidget {
    @Get @Init JanContext *context;
    @Prop JanUnit width = JAN_UNIT_UNDEFINED;
    @Prop JanUnit height = JAN_UNIT_UNDEFINED;
    @Prop(JanOffset *, JanUnit top, JanUnit left, JanUnit right, JanUnit bottom) JanOffset padding = JAN_OFFSET(JAN_UNIT_ZERO, JAN_UNIT_ZERO, JAN_UNIT_ZERO, JAN_UNIT_ZERO);
    @Prop(JanOffset *, JanUnit top, JanUnit left, JanUnit right, JanUnit bottom) JanOffset margin = JAN_OFFSET(JAN_UNIT_ZERO, JAN_UNIT_ZERO, JAN_UNIT_ZERO, JAN_UNIT_ZERO);
    @Prop JanColor backgroundColor = 0;
    @Prop bool visible = true;

    JanConvertedOffset convertedMargin;
    JanConvertedOffset convertedPadding;
    JanRect contentRect;
    JanRect paddingRect;
    JanRect marginRect;

    void Measure(float parentWidth, float parentHeight);
    void ConvertOffsets(float parentWidth, float parentHeight);
    void Place(float x, float y);
    void Draw();
};

void JanWidget::Measure(float parentWidth, float parentHeight) {
    JanWidget_ConvertOffsets(this, parentWidth, parentHeight);

    this->contentRect.width = JanContext_ConvertUnit(this->context, this->width, parentWidth - this->convertedPadding.left - this->convertedPadding.right - this->convertedMargin.left - this->convertedMargin.right);
    this->paddingRect.width = this->convertedPadding.left + this->contentRect.width + this->convertedPadding.right;
    this->marginRect.width = this->convertedMargin.left + this->paddingRect.width + this->convertedMargin.right;

    this->contentRect.height = JanContext_ConvertUnit(this->context, this->height, parentHeight - this->convertedPadding.top - this->convertedPadding.bottom - this->convertedMargin.top - this->convertedMargin.bottom);
    this->paddingRect.height = this->convertedPadding.top + this->contentRect.height + this->convertedPadding.bottom;
    this->marginRect.height = this->convertedMargin.top + this->paddingRect.height + this->convertedMargin.bottom;
}

void JanWidget::ConvertOffsets(float parentWidth, float parentHeight) {
    this->convertedPadding.top = JanContext_ConvertUnit(this->context, this->padding.top, parentHeight);
    this->convertedPadding.left = JanContext_ConvertUnit(this->context, this->padding.left, parentWidth);
    this->convertedPadding.right = JanContext_ConvertUnit(this->context, this->padding.right, parentWidth);
    this->convertedPadding.bottom = JanContext_ConvertUnit(this->context, this->padding.bottom, parentHeight);

    this->convertedMargin.top = JanContext_ConvertUnit(this->context, this->margin.top, parentHeight);
    this->convertedMargin.left = JanContext_ConvertUnit(this->context, this->margin.left, parentWidth);
    this->convertedMargin.right = JanContext_ConvertUnit(this->context, this->margin.right, parentWidth);
    this->convertedMargin.bottom = JanContext_ConvertUnit(this->context, this->margin.bottom, parentHeight);
}

void JanWidget::Place(float x, float y) {
    this->marginRect.x = x;
    this->marginRect.y = y;

    this->paddingRect.x = this->marginRect.x + this->convertedMargin.left;
    this->paddingRect.y = this->marginRect.y + this->convertedMargin.top;

    this->contentRect.x = this->paddingRect.x + this->convertedPadding.left;
    this->contentRect.y = this->paddingRect.y + this->convertedPadding.top;
}

void JanWidget::Draw() {
    if (!this->visible) return;
    Canvas_FillRect(this->context->canvas, (CanvasRect *)&this->paddingRect, this->backgroundColor);

    if (this->context->debug) {
        Canvas_StrokeRect(this->context->canvas, (CanvasRect *)&this->marginRect, CANVAS_RGB(255, 0, 0), 2);
        Canvas_StrokeRect(this->context->canvas, (CanvasRect *)&this->paddingRect, CANVAS_RGB(255, 128, 0), 2);
        Canvas_StrokeRect(this->context->canvas, (CanvasRect *)&this->contentRect, CANVAS_RGB(255, 255, 0), 2);
    }
}
