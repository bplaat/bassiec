class JanBox extends JanContainer {
    @Prop @Init JanOrientation orientation;

    void Measure(float parentWidth, float parentHeight);
    void Place(float x, float y);
    void Draw();
};

void JanBox::Measure(float parentWidth, float parentHeight) {
    JanWidget_ConvertOffsets(this, parentWidth, parentHeight);

    this->contentRect.width = JanContext_ConvertUnit(this->context, this->width, parentWidth - this->convertedPadding.left - this->convertedPadding.right - this->convertedMargin.left - this->convertedMargin.right);
    this->contentRect.height = JanContext_ConvertUnit(this->context, this->height, parentHeight - this->convertedPadding.top - this->convertedPadding.bottom - this->convertedMargin.top - this->convertedMargin.bottom);

    float maxWidth = 0, sumWidth = 0, maxHeight = 0, sumHeight = 0;
    for (uint32_t i = 0; i < this->children->size; i++) {
        JanWidget *child = JAN_WIDGET(this->children->items[i]);
        if (child->width.type == JAN_UNIT_TYPE_UNDEFINED) child->width = this->orientation == JAN_ORIENTATION_HORIZONTAL ? JAN_UNIT_WRAP : JAN_UNIT_MATCH;
        if (child->height.type == JAN_UNIT_TYPE_UNDEFINED) child->height = JAN_UNIT_WRAP;

        JanWidget_Measure(child, this->contentRect.width, this->contentRect.height);
        maxWidth = MAX(maxWidth, child->marginRect.width);
        sumWidth += child->marginRect.width;
        maxHeight = MAX(maxHeight, child->marginRect.height);
        sumHeight += child->marginRect.height;
    }

    if (this->width.type == JAN_UNIT_TYPE_WRAP) {
        this->contentRect.width = this->orientation == JAN_ORIENTATION_HORIZONTAL ? sumWidth : maxWidth;
    }
    if (this->height.type == JAN_UNIT_TYPE_WRAP) {
        this->contentRect.height = this->orientation == JAN_ORIENTATION_HORIZONTAL ? maxHeight : sumHeight;
    }

    this->paddingRect.width = this->convertedPadding.left + this->contentRect.width + this->convertedPadding.right;
    this->marginRect.width = this->convertedMargin.left + this->paddingRect.width + this->convertedMargin.right;

    this->paddingRect.height = this->convertedPadding.top + this->contentRect.height + this->convertedPadding.bottom;
    this->marginRect.height = this->convertedMargin.top + this->paddingRect.height + this->convertedMargin.bottom;
}

void JanBox::Place(float x, float y) {
    JanBox::Place(x, y);
    float childX = this->contentRect.x;
    float childY = this->contentRect.y;
    for (uint32_t i = 0; i < this->children->size; i++) {
        JanWidget *child = JAN_WIDGET(this->children->items[i]);
        JanWidget_Place(child, childX, childY);
        if (this->orientation == JAN_ORIENTATION_HORIZONTAL) {
            childX += child->marginRect.width;
        }
        if (this->orientation == JAN_ORIENTATION_VERTICAL) {
            childY += child->marginRect.height;
        }
    }
}

void JanBox::Draw() {
    if (!this->visible) return;
    JanBox::Draw();

    Canvas_Clip(this->context->canvas, (CanvasRect *)&this->contentRect);
    for (uint32_t i = 0; i < List_GetSize(this->children); i++) {
        JanWidget *child = JAN_WIDGET(List_Get(this->children, i));
        JanWidget_Draw(child);
    }
    Canvas_Clip(this->context->canvas, NULL);
}
