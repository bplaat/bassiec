class JanLabel extends JanWidget {
    @Prop @Init(wcsdup) @Free wchar_t *text;
    @Prop JanFont *font = context->defaultFont;
    @Prop JanColor textColor = JAN_COLOR_HEX(0xffffff);
    @Prop bool singleLine = false;

    void Measure(float parentWidth, float parentHeight);
    void Draw();
};

void JanLabel::Measure(float parentWidth, float parentHeight) {
    JanWidget_ConvertOffsets(this, parentWidth, parentHeight);

    this->contentRect.width = JanContext_ConvertUnit(this->context, this->width, parentWidth - this->convertedPadding.left - this->convertedPadding.right - this->convertedMargin.left - this->convertedMargin.right);
    CanvasRect measureRect = { 0, 0, this->contentRect.width, 0 };
    if (this->width.type == JAN_UNIT_TYPE_WRAP || this->height.type == JAN_UNIT_TYPE_WRAP) {
        CanvasFont font = { this->font->name, JanContext_ConvertUnit(this->context, this->font->size, 0), this->font->weight, this->font->italic, this->font->underline, this->font->lineThrough };
        Canvas_MeasureText(this->context->canvas, this->text, -1, &measureRect, &font, this->singleLine ? CANVAS_TEXT_FORMAT_DEFAULT : (CANVAS_TEXT_FORMAT_DEFAULT | CANVAS_TEXT_FORMAT_WRAP));
    }

    if (this->width.type == JAN_UNIT_TYPE_WRAP) this->contentRect.width = measureRect.width;
    this->paddingRect.width = this->convertedPadding.left + this->contentRect.width + this->convertedPadding.right;
    this->marginRect.width = this->convertedMargin.left + this->paddingRect.width + this->convertedMargin.right;

    this->contentRect.height = this->height.type == JAN_UNIT_TYPE_WRAP ? measureRect.height : JanContext_ConvertUnit(this->context, this->height, parentHeight - this->convertedPadding.top - this->convertedPadding.bottom - this->convertedMargin.top - this->convertedMargin.bottom);
    this->paddingRect.height = this->convertedPadding.top + this->contentRect.height + this->convertedPadding.bottom;
    this->marginRect.height = this->convertedMargin.top + this->paddingRect.height + this->convertedMargin.bottom;
}

void JanLabel::Draw() {
    if (!this->visible) return;
    JanLabel::Draw();
    CanvasFont font = { this->font->name, JanContext_ConvertUnit(this->context, this->font->size, 0), this->font->weight, this->font->italic, this->font->underline, this->font->lineThrough };
    Canvas_DrawText(this->context->canvas, this->text, -1, (CanvasRect *)&this->contentRect, &font, this->singleLine ? CANVAS_TEXT_FORMAT_DEFAULT : (CANVAS_TEXT_FORMAT_DEFAULT | CANVAS_TEXT_FORMAT_WRAP), this->textColor);
}
