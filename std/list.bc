// list.bc: Simple dynamic list implementation for BassieC

class List {
    Object **items;
    @Get uint32_t capacity;
    @Get uint32_t size = 0;

    void Init(uint32_t capacity);
    Object *Get(uint32_t index);
    void Set(uint32_t index, Object *item);
    void Add(Object *item);
    void Insert(uint32_t index, Object *item);
    void Remove(uint32_t index);
    void Free();
}

void List::Init(uint32_t capacity) {
    this->capacity = capacity;
    this->items = malloc(sizeof(Object *) * capacity);
}

Object *List::Get(uint32_t index) {
    return this->items[index];
}

void List::Set(uint32_t index, Object *item) {
    if (index > this->capacity) {
        while (index > this->capacity) {
            this->capacity *= 2;
        }
        this->items = realloc(this->items, sizeof(Object *) * this->capacity);
    }
    while (this->size <= index) {
        this->items[this->size++] = NULL;
    }
    this->items[index] = item;
}

void List::Add(Object *item) {
    if (this->size == this->capacity) {
        this->capacity *= 2;
        this->items = realloc(this->items, sizeof(Object *) * this->capacity);
    }
    this->items[this->size++] = item;
}

void List::Insert(uint32_t index, Object *item) {
    if (this->size == this->capacity) {
        this->capacity *= 2;
        this->items = realloc(this->items, sizeof(Object *) * this->capacity);
    }
    for (uint32_t i = this->size - 1; i >= index; i--) {
        this->items[i + 1] = this->items[i];
    }
    this->size++;
    this->items[index] = item;
}

void List::Remove(uint32_t index) {
    for (uint32_t i = index; i < this->size; i++) {
        this->items[i] = this->items[i + 1];
    }
    this->size--;
}

void List::Free() {
    for (uint32_t i = 0; i < this->size; i++) {
        if (this->items[i] != NULL) {
            Object_Free(this->items[i]);
        }
    }
    free(this->items);
    List::Free();
}
